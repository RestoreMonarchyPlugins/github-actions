name: Build & Create Unturned Rocket Plugin GitHub Release

on:
  workflow_dispatch:
  push:
    branches:
      - master
      
env:
  PROJECT_NAME: ${{ github.event.repository.name }}
  BUILD_DIRECTORY: "./${{ github.event.repository.name }}/bin/Release/net48"
  PLUGIN_FILE_NAME: "${{ github.event.repository.name }}.dll"
  
jobs:
  build:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
    
      - name: Get version
        id: package_version
        uses: KageKirin/get-csproj-version@v0
        with:
          file: "./${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj"

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 6.x
          
      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Install zip
        run: sudo apt-get install zip

      - name: Zip Rocket release artifacts
        run: |
          mkdir -p ./release/Plugins ./release/Libraries
          mv ${{ env.BUILD_DIRECTORY }}/${{ env.PLUGIN_FILE_NAME }} ./release/Plugins/
          if [ -n "$(find ${{ env.BUILD_DIRECTORY }} -maxdepth 1 -name '*.dll')" ]; then
            mv ${{ env.BUILD_DIRECTORY }}/*.dll ./release/Libraries/
          fi
          cd ./release/
          zip -qr ./../release.zip *
        shell: bash
        
      - name: Check tag
        id: check_tag
        uses: mukunku/tag-exists-action@v1.6.0
        with: 
          tag: v${{ steps.package_version.outputs.version }}
        
      - name: Create release
        id: create_release
        if: steps.check_tag.outputs.exists == 'false' 
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package_version.outputs.version }}
          release_name: "${{ github.event.repository.name }} v${{ steps.package_version.outputs.version }}"
          draft: true
          prerelease: false
      
      - name: Upload Rocket release asset
        if: steps.check_tag.outputs.exists == 'false' 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: "/${{ github.event.repository.name }}-v${{ steps.package_version.outputs.version }}.zip"
          asset_content_type: application/zip

      - name: Upload Release Assets
        id: upload-release-assets
        if: steps.check_tag.outputs.exists == 'false' 
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
          assets_path: ./*.unitypackage

      - uses: eregon/publish-release@v1
        if: steps.check_tag.outputs.exists == 'false' 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create_release.outputs.id }}
